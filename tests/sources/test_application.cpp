/*
 Copyright (c) 2025 ETIB Corporation

 Permission is hereby granted, free of charge, to any person obtaining a copy of
 this software and associated documentation files (the "Software"), to deal in
 the Software without restriction, including without limitation the rights to
 use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 of the Software, and to permit persons to whom the Software is furnished to do
 so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
 */

#include "test_application.hpp"
#include "application.hpp"
#include "button.hpp"
#include "container.hpp"
#include "label.hpp"
#include "renderer.hpp"
#include <gtest/gtest.h>
#include <memory>

// Mock Renderer for Application testing
class TestRenderer : public Renderer {
public:
  mutable int drawCallCount = 0;
  mutable int drawTextCallCount = 0;
  mutable int drawRectangleCallCount = 0;
  mutable int drawTriangleCallCount = 0;
  mutable int drawPolygonCallCount = 0;

  void draw(std::shared_ptr<Primitive> primitive) override {
    drawCallCount++;
    // Call parent implementation to test dispatch
    Renderer::draw(primitive);
  }

  void drawText(std::shared_ptr<Text> text) override { drawTextCallCount++; }

  void drawRectangle(std::shared_ptr<Rectangle> rectangle) override {
    drawRectangleCallCount++;
  }

  void drawTriangle(std::shared_ptr<Triangle> triangle) override {
    drawTriangleCallCount++;
  }

  void drawPolygon(std::shared_ptr<Polygon> polygon) override {
    drawPolygonCallCount++;
  }

  void reset() {
    drawCallCount = 0;
    drawTextCallCount = 0;
    drawRectangleCallCount = 0;
    drawTriangleCallCount = 0;
    drawPolygonCallCount = 0;
  }
};

TEST(ApplicationTest, Constructor) {
  Application<TestRenderer> app = Application<TestRenderer>();

  EXPECT_NE(app.getRoot(), nullptr);
}

TEST(ApplicationTest, GetRoot) {
  Application<TestRenderer> app = Application<TestRenderer>();

  auto root = app.getRoot();
  EXPECT_NE(root, nullptr);
  EXPECT_EQ(root->getChildren().size(), 0); // Initially empty
}

TEST(ApplicationTest, SetRoot) {
  Application<TestRenderer> app = Application<TestRenderer>();

  auto newRoot = std::make_shared<Container>();

  app.setRoot(newRoot);

  EXPECT_EQ(app.getRoot(), newRoot);
}

TEST(ApplicationTest, RunWithEmptyRoot) {
  Application<TestRenderer> app = Application<TestRenderer>();

  app.setRoot(nullptr);
  EXPECT_NO_THROW(app.run());
}

TEST(ApplicationTest, RunWithSingleComponent) {
  Application<TestRenderer> app = Application<TestRenderer>();
  auto root = app.getRoot();

  // Add a label that generates a Text primitive
  auto label = std::make_shared<Label>("Test Label");
  root->addChild(label);

  app.run();

  // Should have called draw for the Text primitive generated by Label
  EXPECT_GT(app.getRenderer()->drawCallCount, 0);
  EXPECT_GT(app.getRenderer()->drawTextCallCount, 0);
}

TEST(ApplicationTest, RunWithButton) {
  Application<TestRenderer> app = Application<TestRenderer>();
  auto root = app.getRoot();

  // Add a button that generates Rectangle + Text primitives
  auto button = std::make_shared<Button>("Test Button");
  root->addChild(button);

  app.run();

  // Button should generate 2 primitives (Rectangle + Text)
  EXPECT_EQ(app.getRenderer()->drawCallCount, 2);
  EXPECT_EQ(app.getRenderer()->drawRectangleCallCount, 1);
  EXPECT_EQ(app.getRenderer()->drawTextCallCount, 1);
}

TEST(ApplicationTest, RunWithMultipleComponents) {
  Application<TestRenderer> app = Application<TestRenderer>();
  auto root = app.getRoot();

  // Add multiple components
  auto label1 = std::make_shared<Label>("Label 1");
  auto label2 = std::make_shared<Label>("Label 2");
  auto button = std::make_shared<Button>("Button");

  root->addChild(label1);
  root->addChild(label2);
  root->addChild(button);

  app.run();

  // 2 Labels (2 Text) + 1 Button (1 Rectangle + 1 Text) = 4 primitives total
  EXPECT_EQ(app.getRenderer()->drawCallCount, 4);
  EXPECT_EQ(app.getRenderer()->drawTextCallCount, 3);
  EXPECT_EQ(app.getRenderer()->drawRectangleCallCount, 1);
}

TEST(ApplicationTest, RunWithNestedContainers) {
  Application<TestRenderer> app = Application<TestRenderer>();
  auto root = app.getRoot();

  // Add multiple components
  auto label1 = std::make_shared<Label>("Label 1");
  auto label2 = std::make_shared<Label>("Label 2");
  auto button = std::make_shared<Button>("Button");

  root->addChild(label1);
  root->addChild(label2);
  root->addChild(button);

  app.run();

  // 2 Labels (2 Text) + 1 Button (1 Rectangle + 1 Text) = 4 primitives total
  EXPECT_EQ(app.getRenderer()->drawCallCount, 4);
  EXPECT_EQ(app.getRenderer()->drawTextCallCount, 3);
  EXPECT_EQ(app.getRenderer()->drawRectangleCallCount, 1);
}

TEST(ApplicationTest, UpdateMethod) {
  Application<TestRenderer> app = Application<TestRenderer>();

  auto root = app.getRoot();

  auto label = std::make_shared<Label>("Original Text");
  root->addChild(label);

  // Initial run
  app.run();
  int initialDrawCount = app.getRenderer()->drawCallCount;

  // Reset and update
  app.getRenderer()->reset();
  label->setText("Updated Text");
  app.update();

  // Should redraw after update
  EXPECT_GT(app.getRenderer()->drawCallCount, 0);
  EXPECT_GT(app.getRenderer()->drawTextCallCount, 0);
}

TEST(ApplicationTest, UpdateWithoutInitialRun) {
  Application<TestRenderer> app = Application<TestRenderer>();
  auto root = app.getRoot();

  auto button = std::make_shared<Button>("Update Test");
  root->addChild(button);

  // Call update without initial run
  app.update();

  // Should still work and draw primitives
  EXPECT_EQ(app.getRenderer()->drawCallCount, 2); // Rectangle + Text
  EXPECT_EQ(app.getRenderer()->drawRectangleCallCount, 1);
  EXPECT_EQ(app.getRenderer()->drawTextCallCount, 1);
}

TEST(ApplicationTest, DrawTreeTraversal) {
  Application<TestRenderer> app = Application<TestRenderer>();
  auto root = app.getRoot();

  // Create a complex nested structure
  auto container1 = std::make_shared<Container>();
  auto container2 = std::make_shared<Container>();
  auto label1 = std::make_shared<Label>("Label 1");
  auto label2 = std::make_shared<Label>("Label 2");
  auto button = std::make_shared<Button>("Button");

  // Structure: root -> container1 -> [label1, container2 -> [label2, button]]
  container2->addChild(label2);
  container2->addChild(button);
  container1->addChild(label1);
  container1->addChild(container2);
  root->addChild(container1);

  app.run();

  // Should draw all primitives: 2 Labels (2 Text) + 1 Button (1 Rectangle + 1
  // Text) = 4 total
  EXPECT_EQ(app.getRenderer()->drawCallCount, 4);
  EXPECT_EQ(app.getRenderer()->drawTextCallCount, 3);
  EXPECT_EQ(app.getRenderer()->drawRectangleCallCount, 1);
}

TEST(ApplicationTest, RunWithNullRoot) {
  Application<TestRenderer> app = Application<TestRenderer>();

  // Set root to null
  app.setRoot(nullptr);

  // Should not crash with null root
  EXPECT_NO_THROW(app.run());
  EXPECT_NO_THROW(app.update());
}

TEST(ApplicationTest, MultipleRunCalls) {
  Application<TestRenderer> app = Application<TestRenderer>();
  auto root = app.getRoot();

  auto label = std::make_shared<Label>("Test Label");
  root->addChild(label);

  // Multiple run calls
  app.run();
  int firstRunDrawCount = app.getRenderer()->drawCallCount;

  app.getRenderer()->reset();
  app.run();
  int secondRunDrawCount = app.getRenderer()->drawCallCount;

  // Both runs should produce the same number of draw calls
  EXPECT_EQ(firstRunDrawCount, secondRunDrawCount);
  EXPECT_GT(firstRunDrawCount, 0);
}

TEST(ApplicationTest, StateChangeBetweenRunAndUpdate) {
  Application<TestRenderer> app = Application<TestRenderer>();
  auto root = app.getRoot();

  auto button = std::make_shared<Button>("Original Label");
  root->addChild(button);

  // Initial run
  app.run();
  app.getRenderer()->reset();

  // Change button label
  button->setLabel("Updated Label");

  // Update should reflect changes
  app.update();

  // Should redraw with updated content
  EXPECT_EQ(app.getRenderer()->drawCallCount, 2); // Rectangle + Text
  EXPECT_EQ(app.getRenderer()->drawRectangleCallCount, 1);
  EXPECT_EQ(app.getRenderer()->drawTextCallCount, 1);
}
